name: Integration API CI Pipeline

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
  push:
    branches: [ main ]
    paths:
      - 'integration-api/**'  # Only when code changes
  pull_request:
    branches: [ main ]
    paths:
      - 'integration-api/**'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          
      - name: Install dependencies
        working-directory: ./integration-api
        run: npm install
          
      - name: Lint
        working-directory: ./integration-api
        run: npm run lint
        continue-on-error: true  # Until fully set up
      
      - name: Test
        working-directory: ./integration-api
        run: npm test
        continue-on-error: true  # Until fully set up

  # # Deployment - uncomment when ready to deploy
  # build-and-deploy:
  #   needs: lint-and-test
  #   if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
  #   runs-on: ubuntu-latest
  #   env:
  #     AWS_REGION: eu-central-1
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Set environment
  #       run: |
  #         if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
  #           echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
  #         else
  #           echo "ENVIRONMENT=dev" >> $GITHUB_ENV
  #         fi
      
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubActionsRole
  #         aws-region: ${{ env.AWS_REGION }}
  #         role-session-name: GitHubActions
      
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
      
  #     - name: Get ECR repository name from CloudFormation
  #       run: |
  #         ECR_REPOSITORY=$(aws cloudformation list-exports --query "Exports[?Name=='ad-cm-${{ env.ENVIRONMENT }}-integration-api-repository'].Value" --output text)
  #         echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV
          
  #         # Get ECS cluster and service names
  #         ECS_CLUSTER=$(aws cloudformation list-exports --query "Exports[?Name=='ad-cm-${{ env.ENVIRONMENT }}-api-cluster'].Value" --output text)
  #         echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV
          
  #         ECS_SERVICE=$(aws cloudformation list-exports --query "Exports[?Name=='ad-cm-${{ env.ENVIRONMENT }}-integration-api-service'].Value" --output text)
  #         echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV
      
  #     - name: Build, tag, and push image to Amazon ECR
  #       working-directory: ./integration-api
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         echo "Building image for repository: ${{ env.ECR_REPOSITORY }}"
  #         docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
  #         echo "IMAGE=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV
      
  #     - name: Update ECS service
  #       run: |
  #         echo "Updating ECS service: ${{ env.ECS_SERVICE }} in cluster: ${{ env.ECS_CLUSTER }}"
  #         aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
      
  #     - name: Deployment summary
  #       run: |
  #         echo "‚úÖ Integration API deployed successfully!"
  #         echo "üåê Environment: ${{ env.ENVIRONMENT }}"
  #         echo "üîÑ New image: ${{ env.IMAGE }}"