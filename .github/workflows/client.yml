name: Client CI Pipeline

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
  push:
    branches: [ main ]
    paths:
      - 'client/**'  # Only when code changes
  pull_request:
    branches: [ main ]
    paths:
      - 'client/**'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          
      - name: Install dependencies
        working-directory: ./client
        run: npm install
          
      - name: Lint
        working-directory: ./client
        run: npm run lint
        continue-on-error: true  # Until client is fully set up
      
      - name: Type check
        working-directory: ./client
        run: npm run typecheck
        continue-on-error: true  # Until client is fully set up
      
      - name: Test
        working-directory: ./client
        run: npm test
        continue-on-error: true  # Until client is fully set up

  # # Deployment - uncomment when ready to deploy
  # build-and-deploy:
  #   needs: lint-and-test
  #   if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
  #   runs-on: ubuntu-latest
  #   env:
  #     AWS_REGION: eu-central-1
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '22'
      
  #     - name: Install dependencies
  #       working-directory: ./client
  #       run: npm install
      
  #     - name: Build
  #       working-directory: ./client
  #       run: npm run build
      
  #     - name: Set environment
  #       run: |
  #         if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
  #           echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
  #         else
  #           echo "ENVIRONMENT=dev" >> $GITHUB_ENV
  #         fi
      
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubActionsRole
  #         aws-region: ${{ env.AWS_REGION }}
  #         role-session-name: GitHubActions
      
  #     - name: Get deployment details from CloudFormation
  #       run: |
  #         # Get the S3 bucket name
  #         S3_BUCKET=$(aws cloudformation list-exports --query "Exports[?Name=='ad-cm-${{ env.ENVIRONMENT }}-website-bucket'].Value" --output text)
  #         echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          
  #         # Get the CloudFront distribution ID
  #         DISTRIBUTION_ID=$(aws cloudformation list-exports --query "Exports[?Name=='ad-cm-${{ env.ENVIRONMENT }}-distribution-id'].Value" --output text)
  #         echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV
          
  #         # Get the CloudFront URL
  #         DISTRIBUTION_URL=$(aws cloudformation list-exports --query "Exports[?Name=='ad-cm-${{ env.ENVIRONMENT }}-frontend-url'].Value" --output text)
  #         echo "DISTRIBUTION_URL=$DISTRIBUTION_URL" >> $GITHUB_ENV
      
  #     - name: Deploy to S3
  #       run: |
  #         echo "Deploying to S3 bucket: ${{ env.S3_BUCKET }}"
  #         aws s3 sync ./client/build/ s3://${{ env.S3_BUCKET }}/ --delete
      
  #     - name: Invalidate CloudFront cache
  #       run: |
  #         echo "Invalidating CloudFront distribution: ${{ env.DISTRIBUTION_ID }}"
  #         aws cloudfront create-invalidation --distribution-id ${{ env.DISTRIBUTION_ID }} --paths "/*"
      
  #     - name: Deployment summary
  #       run: |
  #         echo "‚úÖ Frontend deployed successfully!"
  #         echo "üåê Environment: ${{ env.ENVIRONMENT }}"
  #         echo "üîó URL: ${{ env.DISTRIBUTION_URL }}"